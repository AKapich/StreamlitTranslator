import streamlit as st
from audio_recorder.streamlit_audio_recorder.st_audiorec import st_audiorec
from transformers import pipeline
import torch
from gtts import gTTS
from pydub import AudioSegment
from pydub.playback import play
from io import BytesIO
import streamlit as st
import datetime as dt
import  streamlit_toggle as tog

import streamlit_authenticator as stauth
import sqlite3
from pathlib import Path
import os

global FILE_PATH 
FILE_PATH = Path("/volume")  / "translator.db"

class DatabaseConnection:
	def __init__(self, database):
		self.connection = None
		self.database = database

	def __enter__(self):
		self.connection = sqlite3.connect(self.database)
		return self.connection 

	def __exit__(self, exc_type, exc_val, exc_tb):
		if exc_type or exc_val or exc_tb:
			pass
		else:
			self.connection.commit()
		
		self.connection.close()


##### FUNKCJE LOGOWANIA/REJESTRACJI #####
def log_in(credentials):
    global LOGGED_IN, USERNAME 
    authenticator = stauth.Authenticate(credentials, 'translator_cookie', 'translator_signature_key', cookie_expiry_days=7)
    name, auth_status, username = authenticator.login("Login", "main")
    username = username.capitalize()

    if auth_status:
        st.success(f"Zalogowany jako {username}")
        st.sidebar.write(f"Zalogowany jako **{username}**")
        authenticator.logout("Wyloguj", "sidebar")
        USERNAME, LOGGED_IN = username, True
    else:
        if username!='':
            st.error(f"Nieprawid≈Çowe has≈Ço dla u≈ºytkownika {username}")
        USERNAME, LOGGED_IN = username, False


def register(usernames):
    with st.form("Rejestracja"):
        st.write("<p style='font-size: 28px;'>Rejestracja</p>", unsafe_allow_html=True)
        username = st.text_input("Nazwa u≈ºytkownika")
        password = st.text_input("Has≈Ço", type="password")
        password2 = st.text_input("Powt√≥rz has≈Ço", type="password")
        register = st.form_submit_button("Zarejestruj siƒô")  # Change the button text here
    if register:
        if password != password2:
            st.error("Podane has≈Ça r√≥≈ºniƒÖ siƒô od siebie")
            st.stop()
        elif username in usernames:
            st.error("Nazwa u≈ºytkownika jest ju≈º zajƒôta")
            st.stop()
        else:
            with DatabaseConnection(FILE_PATH) as conn:
                cursor = conn.cursor()
                hashed_password = stauth.Hasher(passwords=[password]).generate()[0]
                cursor.execute(f"INSERT INTO Users (username, hashed_password) VALUES (?, ?)", (username, hashed_password,))
            st.success(f"Rejestracja jako {username} udana. Teraz proszƒô siƒô zalogowaƒá.")

    
def enter(action):
    with DatabaseConnection(FILE_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM Users")
        user_data = cursor.fetchall()
        usernames = [row[0] for row in user_data]
        passwords = [row[1] for row in user_data]

    credentials = {"usernames":{}}
    for un, name, pw in zip(usernames, usernames, passwords):
        user_dict = {"name":name,"password":pw}
        credentials["usernames"].update({un:user_dict})
   
    if action == "Register":
        register(usernames)
    elif action == "Login":
        log_in(credentials)


##### ZAPISYWANIE HISTORII #####
def display_row(h):
    col1, col2 = st.columns([0.8, 0.2])
    with col1:
        st.write(f"{h[0]}")
    with col2:
        st.write(f"{h[4]} ‚Üí {h[5]}")
    st.success(f"{h[2]} ‚û°Ô∏è {h[3]}")
    st.write("---")


def view_history(username):
    st.header("Historia t≈Çumacze≈Ñ")
    st.markdown("---")
    with DatabaseConnection(FILE_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute(f"SELECT * FROM History WHERE username='{username}' ORDER BY ROWID DESC")
        history = cursor.fetchall()
    if len(history)==0:
        st.warning("Brak historii t≈Çumacze≈Ñ")
        st.stop()
    for h in history[:3]:
        display_row(h)
    if len(history)>3:
        toggle = tog.st_toggle_switch("Poka≈º wiƒôcej", active_color="#173928", track_color='#265f42', key="toggle_switch")
        if toggle:
            for h in history[3:]:
                display_row(h)

def save_history(username, transcription, translation, og_lang, output_lang, date):
    with DatabaseConnection(FILE_PATH) as conn:
        cursor = conn.cursor()
        # weryfikacja, czy pojawi≈Ço siƒô nowe t≈Çumaczenie
        cursor.execute(f"SELECT transcription, translation FROM History WHERE username='{username}' ORDER BY ROWID DESC LIMIT 1")
        last_row = cursor.fetchone()
        if last_row==None or last_row[0]+last_row[1]!=transcription+translation:
            cursor.execute(f"INSERT INTO History (date, username, transcription, translation, og_lang, output_lang) VALUES (?, ?, ?, ?, ?, ?)",
                        (date, username, transcription, translation, og_lang, output_lang,))


##### FUNKCJE T≈ÅUMACZENIA #####
@st.cache_resource(show_spinner=False)
def load_model():
    device = "cuda:0" if torch.cuda.is_available() else "cpu"
    return pipeline("automatic-speech-recognition", model="openai/whisper-tiny", device=device)
pipe = load_model()


@st.cache_data(show_spinner=False)
def transcribe(audio, lang='pl'):
    outputs = pipe(audio, max_new_tokens=256, generate_kwargs={"task": "transcribe", "language": f"{lang}"})
    return outputs["text"]


@st.cache_data(show_spinner=False)
def text2speech(text, language):
    tts = gTTS(text, lang=language)
    audio_stream = BytesIO()
    tts.write_to_fp(audio_stream)
    audio_stream.seek(0)
    return AudioSegment.from_mp3(audio_stream)


st.markdown('''<style>.css-1egvi7u {margin-top: -3rem;}</style>''',
            unsafe_allow_html=True)
st.markdown('''<style>.stAudio {height: 45px;}</style>''',
            unsafe_allow_html=True)
st.markdown('''<style>.css-v37k9u a {color: #ff4c4b;}</style>''',
            unsafe_allow_html=True)
st.markdown('''<style>.css-nlntq9 a {color: #ff4c4b;}</style>''',
            unsafe_allow_html=True) 

langdict = language_abbreviations = {
"Afrikaans": "af",
"Arabski": "ar",
"Arme≈Ñski": "hy",
"Azerski": "az",
"Bia≈Çoruski": "be",
"Bo≈õniacki": "bs",
"Bu≈Çgarski": "bg",
"Katalo≈Ñski": "ca",
"Chi≈Ñski": "zh",
"Chorwacki": "hr",
"Czeski": "cs",
"Du≈Ñski": "da",
"Holenderski": "nl",
"Angielski": "en",
"Esto≈Ñski": "et",
"Fi≈Ñski": "fi",
"Francuski": "fr",
"Galicyjski": "gl",
"Niemiecki": "de",
"Grecki": "el",
"Hebrajski": "he",
"Hindi": "hi",
"Wƒôgierski": "hu",
"Islandzki": "is",
"Indonezyjski": "id",
"W≈Çoski": "it",
"Japo≈Ñski": "ja",
"Kazachski": "kk",
"Korea≈Ñski": "ko",
"≈Åotewski": "lv",
"Litewski": "lt",
"Macedo≈Ñski": "mk",
"Malajski": "ms",
"Marathi": "mr",
"Maori": "mi",
"Nepalski": "ne",
"Norweski": "no",
"Perski": "fa",
"Polski": "pl",
"Portugalski": "pt",
"Rumu≈Ñski": "ro",
"Rosyjski": "ru",
"Serbski": "sr",
"S≈Çowacki": "sk",
"S≈Çowe≈Ñski": "sl",
"Hiszpa≈Ñski": "es",
"Suahili": "sw",
"Szwedzki": "sv",
"Tagalog": "tl",
"Tamilski": "ta",
"Tajski": "th",
"Turecki": "tr",
"Ukrai≈Ñski": "uk",
"Urdu": "ur",
"Wietnamski": "vi",
"Walijski": "cy",
}


def main():
    st.title('T≈Çumacz')
    option = st.selectbox("Wybierz formƒô wgrania danych: ", ['Mikrofon', 'Gotowy plik audio [.wav]'], 0)
    st.markdown("---")
    
    st.markdown('''<style>body {padding: 10px;} .stAudio {height: 45px;} .css-1egvi7u {margin-top: -3rem;} .css-v37k9u a {color: #ff4c4b;}</style>''',
                 unsafe_allow_html=True)


    with st.sidebar:
        st.write('---')
        st.title("Ustawienia jƒôzykowe")
        og_lang = st.selectbox("Wybierz jƒôzyk wej≈õciowy: ", langdict.keys(), 38)
        output_lang = st.selectbox("Wybierz jƒôzyk wyj≈õciowy:", langdict.keys(), 13)
        st.markdown("---")
        st.write("T≈Çumacz stworzony przez:")
        st.write("[Aleks Kapich](https://github.com/AKapich)")
        st.write("[Tymoteusz Kwieci≈Ñski](https://github.com/Fersoil)")
        st.write("[Micha≈Ç Matejczuk](https://github.com/matejczukm)")
        

    if option =='Mikrofon':
        wav_audio_data = st_audiorec()
        col_info, col_space = st.columns([0.57, 0.43])
        with col_info:
            st.write('\n')
    else:
        wav_audio_data = st.file_uploader("Wybierz plik audio", type=["wav"])
        if wav_audio_data is not None:
            wav_audio_data = wav_audio_data.read()


    st.markdown("---")
    if wav_audio_data is not None:
        st.write('**Oryginalny tekst:**')
        with st.spinner("Transkrybowanie tekstu..."):
            transcription = transcribe(wav_audio_data, lang=langdict[og_lang])
            st.write(transcription, unsafe_allow_html=True)
        try:
            st.write(f'**T≈Çumaczenie na {output_lang.lower()}:**')
            with st.spinner("T≈Çumaczenie tekstu..."):
                translation = transcribe(wav_audio_data, lang=langdict[output_lang])
                st.write(translation, unsafe_allow_html=True)
                save_history(USERNAME, transcription, translation, og_lang, output_lang, dt.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                sound = text2speech(translation, langdict[output_lang])

                tmp_filepath = "/tmp/output.wav"
                sound.export(tmp_filepath, format="wav")
                
                if st.button('üîä'):
                    st.audio(tmp_filepath)
        except AssertionError:
            st.error('Nie uda≈Ço siƒô przet≈Çumaczyƒá tekstu. Spr√≥buj ponownie.')



if __name__ == '__main__':
    global LOGGED_IN
    global USERNAME
    LOGGED_IN = False
    USERNAME = None
    tab1, tab2, tab3, tab4 = st.tabs(["üîë Login", "‚úçüèª Rejestracja", "üîä T≈Çumacz", "üìÑ Historia"])

    with tab1:
        enter(action="Login")
    with tab2:
        enter(action="Register")
    with tab3:
        if LOGGED_IN:
            main()
        else:
            st.warning("Proszƒô zalogowaƒá siƒô, aby u≈ºyƒá t≈Çumacza")
    with tab4:
        if LOGGED_IN:
            view_history(USERNAME)
        else:
            st.warning("Proszƒô zalogowaƒá siƒô, aby mieƒá dostƒôp do historii")
